num_steps := 15;
dat Queue{
    data: (Packet × ℝ)[];
    def Queue(){
        data = ([]:(Packet × ℝ)[]);
    }
    def pushFront(x: Packet × ℝ){
        data=[x]~data;
    }
    def pushBack(x: Packet × ℝ){
        data=data~[x];
    }
    def takeFront(){
        r:=front();
        popFront();
        return r;
    }
    def takeBack(){
        r:=data[size()-1];
        data=data[0..size()-1];
        return r;
    }
    def size(){
        return data.length;
    }
    def front(){
        return data[0];
    }
    def dupFront(){
        pushFront(front());
    }
    def popFront(){
        data=data[1..size()];
    }
}
k := 4, S1 := 0, S2 := 1, S3 := 2, S4 := 3;
dat Packet{
    address: ℝ, hops: ℝ;
    def Packet(){
        address = 0;
        hops = 0;
    }
}
dat __first_ty{
    Q_in: Queue, Q_out: Queue;
    a1: ℝ, h1: ℝ, a2: ℝ, h2: ℝ, max2: ℝ, max3: ℝ, max4: ℝ;
    def __first_ty(){
        Q_in = Queue();
        Q_out = Queue();
        a1 = 2;
        h1 = 1;
        a2 = 0;
        h2 = 0;
        max2 = 1;
        max3 = 0;
        max4 = 0;
    }
    def __run(){
        if (Q_in.data[0][1]==1){
            if (a1==2){
                h1 = 1;
            } else {
                if (a2==2){
                    h2 = 1;
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = 2;
                        h1 = 1;
                    } else {
                        a2 = 2;
                        h2 = 1;
                    }
                }
            }
        }
        if (((Q_in.data[0][0].address>0)&&(Q_in.data[0][0].address<5))&&(Q_in.data[0][0].address!=1)){
            if (a1==Q_in.data[0][0].address){
                if (h1>(Q_in.data[0][0].hops+1)){
                    h1 = (Q_in.data[0][0].hops+1);
                }
            } else {
                if (a2==Q_in.data[0][0].address){
                    if (h2>(Q_in.data[0][0].hops+1)){
                        h2 = (Q_in.data[0][0].hops+1);
                    }
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = Q_in.data[0][0].address;
                        h1 = (Q_in.data[0][0].hops+1);
                    } else {
                        a2 = Q_in.data[0][0].address;
                        h2 = (Q_in.data[0][0].hops+1);
                    }
                }
            }
            if (Q_in.data[0][0].address==3){
                max3 = (Q_in.data[0][0].hops+1);
            } else {
                if (Q_in.data[0][0].address==4){
                    max4 = (Q_in.data[0][0].hops+1);
                }
            }
        }
        choice := uniformInt(1,3);
        if (choice==1){
            Q_in.pushFront((Packet(),0));
            Q_in.data[0][0].address = a1;
            Q_in.data[0][0].hops = h1;
            Q_out.pushBack((Q_in.takeFront()[0],1));
        } else {
            if (choice==2){
                Q_in.pushFront((Packet(),0));
                Q_in.data[0][0].address = a2;
                Q_in.data[0][0].hops = h2;
                Q_out.pushBack((Q_in.takeFront()[0],1));
            }
        }
    }
}
dat __node2_ty{
    Q_in: Queue, Q_out: Queue;
    a1: ℝ, h1: ℝ, a2: ℝ, h2: ℝ;
    def __node2_ty(){
        Q_in = Queue();
        Q_out = Queue();
        a1 = 0;
        h1 = 0;
        a2 = 0;
        h2 = 0;
    }
    def __run(){
        if (Q_in.data[0][1]==1){
            if (a1==1){
                h1 = 1;
            } else {
                if (a2==1){
                    h2 = 1;
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = 1;
                        h1 = 1;
                    } else {
                        a2 = 1;
                        h2 = 1;
                    }
                }
            }
        }
        if (Q_in.data[0][1]==2){
            if (a1==3){
                h1 = 1;
            } else {
                if (a2==3){
                    h2 = 1;
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = 3;
                        h1 = 1;
                    } else {
                        a2 = 3;
                        h2 = 1;
                    }
                }
            }
        }
        if (Q_in.data[0][1]==3){
            if (a1==4){
                h1 = 1;
            } else {
                if (a2==4){
                    h2 = 1;
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = 4;
                        h1 = 1;
                    } else {
                        a2 = 4;
                        h2 = 1;
                    }
                }
            }
        }
        if (((Q_in.data[0][0].address>0)&&(Q_in.data[0][0].address<5))&&(Q_in.data[0][0].address!=2)){
            if (a1==Q_in.data[0][0].address){
                if (h1>(Q_in.data[0][0].hops+1)){
                    h1 = (Q_in.data[0][0].hops+1);
                }
            } else {
                if (a2==Q_in.data[0][0].address){
                    if (h2>(Q_in.data[0][0].hops+1)){
                        h2 = (Q_in.data[0][0].hops+1);
                    }
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = Q_in.data[0][0].address;
                        h1 = (Q_in.data[0][0].hops+1);
                    } else {
                        a2 = Q_in.data[0][0].address;
                        h2 = (Q_in.data[0][0].hops+1);
                    }
                }
            }
        }
        choice := uniformInt(1,3);
        if (choice==1){
            Q_in.pushFront((Packet(),0));
            Q_in.data[0][0].address = a1;
            Q_in.data[0][0].hops = h1;
            Q_out.pushBack((Q_in.takeFront()[0],uniformInt(1,3)));
        } else {
            if (choice==2){
                Q_in.pushFront((Packet(),0));
                Q_in.data[0][0].address = a2;
                Q_in.data[0][0].hops = h2;
                Q_out.pushBack((Q_in.takeFront()[0],uniformInt(1,3)));
            }
        }
    }
}
dat __node3_ty{
    Q_in: Queue, Q_out: Queue;
    a1: ℝ, h1: ℝ, a2: ℝ, h2: ℝ;
    def __node3_ty(){
        Q_in = Queue();
        Q_out = Queue();
        a1 = 2;
        h1 = 1;
        a2 = 0;
        h2 = 0;
    }
    def __run(){
        if (Q_in.data[0][1]==1){
            if (a1==2){
                h1 = 1;
            } else {
                if (a2==2){
                    h2 = 1;
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = 2;
                        h1 = 1;
                    } else {
                        a2 = 2;
                        h2 = 1;
                    }
                }
            }
        }
        if (Q_in.data[0][1]==2){
            if (a1==4){
                h1 = 1;
            } else {
                if (a2==4){
                    h2 = 1;
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = 4;
                        h1 = 1;
                    } else {
                        a2 = 4;
                        h2 = 1;
                    }
                }
            }
        }
        if (((Q_in.data[0][0].address>0)&&(Q_in.data[0][0].address<5))&&(Q_in.data[0][0].address!=3)){
            if (a1==Q_in.data[0][0].address){
                if (h1>(Q_in.data[0][0].hops+1)){
                    h1 = (Q_in.data[0][0].hops+1);
                }
            } else {
                if (a2==Q_in.data[0][0].address){
                    if (h2>(Q_in.data[0][0].hops+1)){
                        h2 = (Q_in.data[0][0].hops+1);
                    }
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = Q_in.data[0][0].address;
                        h1 = (Q_in.data[0][0].hops+1);
                    } else {
                        a2 = Q_in.data[0][0].address;
                        h2 = (Q_in.data[0][0].hops+1);
                    }
                }
            }
        }
        choice := uniformInt(1,3);
        if (choice==1){
            Q_in.pushFront((Packet(),0));
            Q_in.data[0][0].address = a1;
            Q_in.data[0][0].hops = h1;
            Q_out.pushBack((Q_in.takeFront()[0],uniformInt(1,2)));
        } else {
            if (choice==2){
                Q_in.pushFront((Packet(),0));
                Q_in.data[0][0].address = a2;
                Q_in.data[0][0].hops = h2;
                Q_out.pushBack((Q_in.takeFront()[0],uniformInt(1,2)));
            }
        }
    }
}
dat __node4_ty{
    Q_in: Queue, Q_out: Queue;
    a1: ℝ, h1: ℝ, a2: ℝ, h2: ℝ;
    def __node4_ty(){
        Q_in = Queue();
        Q_out = Queue();
        a1 = 2;
        h1 = 1;
        a2 = 0;
        h2 = 0;
    }
    def __run(){
        if (Q_in.data[0][1]==1){
            if (a1==2){
                h1 = 1;
            } else {
                if (a2==2){
                    h2 = 1;
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = 2;
                        h1 = 1;
                    } else {
                        a2 = 2;
                        h2 = 1;
                    }
                }
            }
        }
        if (Q_in.data[0][1]==2){
            if (a1==3){
                h1 = 1;
            } else {
                if (a2==3){
                    h2 = 1;
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = 3;
                        h1 = 1;
                    } else {
                        a2 = 3;
                        h2 = 1;
                    }
                }
            }
        }
        if (((Q_in.data[0][0].address>0)&&(Q_in.data[0][0].address<5))&&(Q_in.data[0][0].address!=4)){
            if (a1==Q_in.data[0][0].address){
                if (h1>(Q_in.data[0][0].hops+1)){
                    h1 = (Q_in.data[0][0].hops+1);
                }
            } else {
                if (a2==Q_in.data[0][0].address){
                    if (h2>(Q_in.data[0][0].hops+1)){
                        h2 = (Q_in.data[0][0].hops+1);
                    }
                } else {
                    if flip((1/2)){
                        a2 = a1;
                        h2 = h1;
                        a1 = Q_in.data[0][0].address;
                        h1 = (Q_in.data[0][0].hops+1);
                    } else {
                        a2 = Q_in.data[0][0].address;
                        h2 = (Q_in.data[0][0].hops+1);
                    }
                }
            }
        }
        choice := uniformInt(1,3);
        if (choice==1){
            Q_in.pushFront((Packet(),0));
            Q_in.data[0][0].address = a1;
            Q_in.data[0][0].hops = h1;
            Q_out.pushBack((Q_in.takeFront()[0],uniformInt(1,2)));
        } else {
            if (choice==2){
                Q_in.pushFront((Packet(),0));
                Q_in.data[0][0].address = a2;
                Q_in.data[0][0].hops = h2;
                Q_out.pushBack((Q_in.takeFront()[0],uniformInt(1,2)));
            }
        }
    }
}
RunSw:=0, FwdQ:=1;
dat __D{
    __S1 : __first_ty, __S2 : __node2_ty, __S3 : __node3_ty, __S4 : __node4_ty;
    def __D(){
        __S1 = __first_ty(), __S2 = __node2_ty(), __S3 = __node3_ty(), __S4 = __node4_ty();
    }
    def scheduler(){
        actions := ([]: (R x R)[]);
        for i in [0..k){
            if (if i == 0 { __S1.Q_in } else if i == 1 { __S2.Q_in } else if i == 2 { __S3.Q_in } else  { __S4.Q_in }).size() > 0 {
                actions ~= [(RunSw,i)];
            }
            if (if i == 0 { __S1.Q_out } else if i == 1 { __S2.Q_out } else if i == 2 { __S3.Q_out } else  { __S4.Q_out }).size() > 0 {
                actions ~= [(FwdQ,i)];
            }
        }
        return actions[uniformInt(0,actions.length - 1)];
    }
    def __step(){
        if __S1.Q_in.size() || __S1.Q_out.size() || __S2.Q_in.size() || __S2.Q_out.size() || __S3.Q_in.size() || __S3.Q_out.size() || __S4.Q_in.size() || __S4.Q_out.size() {
            (action,node) := scheduler();
            if action {
                if node == 0 && __S1.Q_out.size() {
                    (pkt,port) := __S1.Q_out.takeFront();
                    if port == 1 {
                        __S2.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 1 && __S2.Q_out.size() {
                    (pkt,port) := __S2.Q_out.takeFront();
                    if port == 1 {
                        __S1.Q_in.pushBack((pkt, 1));
                    }
                    if port == 2 {
                        __S3.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S4.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 2 && __S3.Q_out.size() {
                    (pkt,port) := __S3.Q_out.takeFront();
                    if port == 1 {
                        __S2.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S4.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 3 && __S4.Q_out.size() {
                    (pkt,port) := __S4.Q_out.takeFront();
                    if port == 1 {
                        __S2.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S3.Q_in.pushBack((pkt, 2));
                    }
                }
            } else {
                if node == 0 && __S1.Q_in.size() {
                    __S1.__run();
                }
                if node == 1 && __S2.Q_in.size() {
                    __S2.__run();
                }
                if node == 2 && __S3.Q_in.size() {
                    __S3.__run();
                }
                if node == 3 && __S4.Q_in.size() {
                    __S4.__run();
                }
            }
        }
    }
}
def main(){
    __d := __D();
    __d.__S1.Q_in.pushBack((Packet(),0));
    __d.__S1.__run();
    repeat num_steps {
        __d.__step();
    }
    assert(!(__d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size() || __d.__S4.Q_in.size() || __d.__S4.Q_out.size()));
    q₁ := Expectation((if S1 == 0 { __d.__S1.max3 } else { assert(0) }));
    return (q₁);
}

